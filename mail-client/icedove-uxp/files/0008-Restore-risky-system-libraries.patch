From 2ea29335466331cbf998b9b250e7cdd051554bee Mon Sep 17 00:00:00 2001
From: Gaming4JC <g4jc@hyperbola.info>
Date: Sat, 14 May 2022 10:30:35 -0400
Subject: [PATCH] Restore risky system libraries

WARNING: Not recommended and entirely unsupported upstream.
libevent - known incompatibilities causing crashes with certain version/application combinations.
ICU - system ICU will break JS Intl.
sqlite - at the core of our profile manipulation, places, and many functions. If the lib API ever deviates in the slightest it will kill us.
libpng - for APNG and misc fixes
libvpx - for strict compat
---
 build/autoconf/icu.m4                         |  16 +-
 build/directive4.py                           |   3 +
 build/moz.configure/old.configure             |   5 +
 config/Makefile.in                            |   4 +
 config/external/icu/moz.build                 |  20 +-
 config/external/moz.build                     |   6 +-
 config/moz.build                              |   3 +
 config/system-headers                         |  32 ++
 db/sqlite3/src/moz.build                      |  10 +-
 ipc/chromium/moz.build                        |   4 +-
 .../src/third_party/libeventcommon.mozbuild   |   2 +-
 ipc/chromium/src/third_party/moz.build        |   3 +
 media/webrtc/signaling/test/common.build      |   3 +
 old-configure.in                              | 285 ++++++++++++++++++
 storage/SQLiteMutex.h                         |   2 +-
 storage/moz.build                             |   4 +
 toolkit/library/moz.build                     |   9 +
 17 files changed, 392 insertions(+), 19 deletions(-)

diff --git a/mozilla/build/autoconf/icu.m4 b/mozilla/build/autoconf/icu.m4
index 090d6c0a2..d76c98c29 100644
--- a/mozilla/build/autoconf/icu.m4
+++ b/mozilla/build/autoconf/icu.m4
@@ -9,6 +9,18 @@ AC_DEFUN([MOZ_CONFIG_ICU], [
 
 ICU_LIB_NAMES=
 
+MOZ_SYSTEM_ICU=
+MOZ_ARG_WITH_BOOL(system-icu,
+[  --with-system-icu
+                          Use system ICU (located with pkgconfig)],
+    MOZ_SYSTEM_ICU=1)
+if test -n "$MOZ_SYSTEM_ICU"; then
+    PKG_CHECK_MODULES(MOZ_ICU, icu-i18n >= 58.1)
+    CFLAGS="$CFLAGS $MOZ_ICU_CFLAGS"
+    CXXFLAGS="$CXXFLAGS $MOZ_ICU_CFLAGS"
+fi
+AC_SUBST(MOZ_SYSTEM_ICU)
+
 dnl We always use ICU.
 USE_ICU=1
 
@@ -38,7 +50,7 @@ if test -n "$USE_ICU"; then
     dnl We also don't do it on Windows because sometimes the file goes
     dnl missing -- possibly due to overzealous antivirus software? --
     dnl which prevents the browser from starting up :(
-    if test -z "$JS_STANDALONE"; then
+    if test -z "$JS_STANDALONE" -a -z "$MOZ_SYSTEM_ICU"; then
         MOZ_ICU_DATA_ARCHIVE=1
     else
         MOZ_ICU_DATA_ARCHIVE=
@@ -51,7 +63,7 @@ AC_SUBST(USE_ICU)
 AC_SUBST(ICU_DATA_FILE)
 AC_SUBST(MOZ_ICU_DATA_ARCHIVE)
 
-if test -n "$USE_ICU"; then
+if test -n "$USE_ICU" -a -z "$MOZ_SYSTEM_ICU"; then
     if test -z "$YASM" -a -z "$GNU_AS" -a "$COMPILE_ENVIRONMENT"; then
       AC_MSG_ERROR([Building ICU requires either yasm or a GNU assembler. If you do not have either of those available for this platform you must use --without-intl-api])
     fi
diff --git a/mozilla/build/directive4.py b/mozilla/build/directive4.py
index 650349d68..09ded957d 100644
--- a/mozilla/build/directive4.py
+++ b/mozilla/build/directive4.py
@@ -35,6 +35,9 @@ if ('MOZ_OFFICIAL_BRANDING' in listConfig) or (strBrandingDirectory.endswith("br
         listViolations += [
             'MOZ_SYSTEM_JPEG',
             'MOZ_SYSTEM_ZLIB',
+            'MOZ_SYSTEM_PNG',
+            'MOZ_SYSTEM_LIBVPX',
+            'MOZ_SYSTEM_SQLITE',
             'MOZ_SYSTEM_BZ2',
             'MOZ_SYSTEM_JEMALLOC'
         ]
diff --git a/mozilla/build/moz.configure/old.configure b/mozilla/build/moz.configure/old.configure
index 902d42ea0..f279c10e7 100644
--- a/mozilla/build/moz.configure/old.configure
+++ b/mozilla/build/moz.configure/old.configure
@@ -238,6 +238,7 @@ def old_configure_options(*options):
     '--enable-system-cairo',
     '--enable-system-extension-dirs',
     '--enable-system-pixman',
+    '--enable-system-sqlite',
     '--enable-tasktracer',
     '--enable-tests',
     '--enable-thread-sanitizer',
@@ -286,7 +287,11 @@ def old_configure_options(*options):
     '--with-sixgill',
     '--with-soft-float',
     '--with-system-bz2',
+    '--with-system-icu',
     '--with-system-jpeg',
+    '--with-system-libevent',
+    '--with-system-libvpx',
+    '--with-system-png',
     '--with-system-zlib',
     '--with-thumb',
     '--with-thumb-interwork',
diff --git a/mozilla/config/Makefile.in b/mozilla/config/Makefile.in
index c9cc3592c..10807cfb9 100644
--- a/mozilla/config/Makefile.in
+++ b/mozilla/config/Makefile.in
@@ -44,7 +44,11 @@ export:: $(export-preqs)
 		-DMOZ_SYSTEM_HUNSPELL=$(MOZ_SYSTEM_HUNSPELL) \
 		-DMOZ_SYSTEM_BZ2=$(MOZ_SYSTEM_BZ2) \
 		-DMOZ_SYSTEM_ZLIB=$(MOZ_SYSTEM_ZLIB) \
+		-DMOZ_SYSTEM_PNG=$(MOZ_SYSTEM_PNG) \
 		-DMOZ_SYSTEM_JPEG=$(MOZ_SYSTEM_JPEG) \
+		-DMOZ_SYSTEM_LIBEVENT=$(MOZ_SYSTEM_LIBEVENT) \
+		-DMOZ_SYSTEM_LIBVPX=$(MOZ_SYSTEM_LIBVPX) \
+		-DMOZ_SYSTEM_ICU=$(MOZ_SYSTEM_ICU) \
 		$(srcdir)/system-headers $(srcdir)/stl-headers | $(PERL) $(topsrcdir)/nsprpub/config/make-system-wrappers.pl system_wrappers
 	$(INSTALL) system_wrappers $(DIST)
 
diff --git a/mozilla/config/external/icu/moz.build b/mozilla/config/external/icu/moz.build
index ba95cd0fb..94451e5c9 100644
--- a/mozilla/config/external/icu/moz.build
+++ b/mozilla/config/external/icu/moz.build
@@ -5,14 +5,18 @@
 
 Library('icu')
 
-DIRS += [
-    'common',
-    'data',
-    'i18n',
-]
-
-if CONFIG['MOZ_ICU_DATA_ARCHIVE']:
+if CONFIG['MOZ_SYSTEM_ICU']:
+    OS_LIBS += CONFIG['MOZ_ICU_LIBS']
     DIRS += ['stubdata']
     USE_LIBS += ['icustubdata']
 else:
-    USE_LIBS += ['icudata']
+    DIRS += [
+        'common',
+        'data',
+        'i18n',
+    ]
+    if CONFIG['MOZ_ICU_DATA_ARCHIVE']:
+        DIRS += ['stubdata']
+        USE_LIBS += ['icustubdata']
+    else:
+        USE_LIBS += ['icudata']
diff --git a/mozilla/config/external/moz.build b/mozilla/config/external/moz.build
index 47db9e152..47ec26424 100644
--- a/mozilla/config/external/moz.build
+++ b/mozilla/config/external/moz.build
@@ -26,12 +26,14 @@ if CONFIG['MOZ_TREMOR']:
 if CONFIG['MOZ_WEBM_ENCODER']:
     external_dirs += ['media/libmkv']
 
-external_dirs += ['media/libvpx']
+if not CONFIG['MOZ_SYSTEM_LIBVPX']:
+    external_dirs += ['media/libvpx']
 
 if CONFIG['MOZ_AV1']:
     external_dirs += ['media/libaom']
 
-external_dirs += ['media/libpng']
+if not CONFIG['MOZ_SYSTEM_PNG']:
+    external_dirs += ['media/libpng']
 
 external_dirs += ['media/libwebp']
 
diff --git a/mozilla/config/moz.build b/mozilla/config/moz.build
index 3e95e46d2..aad7673df 100644
--- a/mozilla/config/moz.build
+++ b/mozilla/config/moz.build
@@ -31,6 +31,9 @@ if CONFIG['HOST_OS_ARCH'] != 'WINNT':
 if CONFIG['GKMEDIAS_SHARED_LIBRARY']:
     DEFINES['GKMEDIAS_SHARED_LIBRARY'] = True
 
+if CONFIG['MOZ_SYSTEM_ICU']:
+    DEFINES['MOZ_SYSTEM_ICU'] = True
+
 PYTHON_UNIT_TESTS += [
     'tests/test_mozbuild_reading.py',
     'tests/unit-expandlibs.py',
diff --git a/mozilla/config/system-headers b/mozilla/config/system-headers
index 2acb1e331..123c7cde5 100644
--- a/mozilla/config/system-headers
+++ b/mozilla/config/system-headers
@@ -1035,6 +1035,9 @@ soundtouch/SoundTouchFactory.h
 #if MOZ_LIBAV_FFT==1
 libavcodec/avfft.h
 #endif
+#if MOZ_SYSTEM_PNG==1
+png.h
+#endif
 #if MOZ_SYSTEM_ZLIB==1
 zlib.h
 #endif
@@ -1055,7 +1058,11 @@ bzlib.h
 #ifdef MOZ_ENABLE_GIO
 gio/gio.h
 #endif
+#if MOZ_SYSTEM_LIBEVENT==1
+event.h
+#else
 sys/event.h
+#endif
 #ifdef MOZ_ENABLE_LIBPROXY
 proxy.h
 #endif
@@ -1070,6 +1077,15 @@ QtSparql/qsparqlresult.h
 #if MOZ_TREE_PIXMAN!=1
 pixman.h
 #endif
+#if MOZ_SYSTEM_LIBVPX==1
+vpx/svc_context.h
+vpx/vpx_codec.h
+vpx/vpx_decoder.h
+vpx/vpx_encoder.h
+vpx/vp8cx.h
+vpx/vp8dx.h
+vpx_mem/vpx_mem.h
+#endif
 #ifdef GKMEDIAS_SHARED_LIBRARY
 vpx/vpx_codec.h
 vpx/vpx_decoder.h
@@ -1098,6 +1114,22 @@ kvm.h
 spawn.h
 err.h
 xlocale.h
+#ifdef MOZ_SYSTEM_ICU
+unicode/locid.h
+unicode/numsys.h
+unicode/timezone.h
+unicode/ucal.h
+unicode/uchar.h
+unicode/uclean.h
+unicode/ucol.h
+unicode/udat.h
+unicode/udatpg.h
+unicode/uenum.h
+unicode/unorm.h
+unicode/unum.h
+unicode/ustring.h
+unicode/utypes.h
+#endif
 libutil.h
 unwind.h
 fenv.h
diff --git a/mozilla/db/sqlite3/src/moz.build b/mozilla/db/sqlite3/src/moz.build
index 1ffc326f8..3d0d13509 100644
--- a/mozilla/db/sqlite3/src/moz.build
+++ b/mozilla/db/sqlite3/src/moz.build
@@ -8,9 +8,13 @@ NO_VISIBILITY_FLAGS = True
 # We allow warnings for third-party code that can be updated from upstream.
 ALLOW_COMPILER_WARNINGS = True
 
-GeckoSharedLibrary('sqlite', linkage=None, mozglue='library')
-SHARED_LIBRARY_NAME = 'mozsqlite3'
-SYMBOLS_FILE = 'sqlite.symbols'
+if CONFIG['MOZ_SYSTEM_SQLITE']:
+    Library('sqlite')
+    OS_LIBS += CONFIG['SQLITE_LIBS']
+else:
+  GeckoSharedLibrary('sqlite', linkage=None, mozglue='library')
+  SHARED_LIBRARY_NAME = 'mozsqlite3'
+  SYMBOLS_FILE = 'sqlite.symbols'
 
 EXPORTS += ['sqlite3.h']
 SOURCES += ['sqlite3.c']
diff --git a/mozilla/ipc/chromium/moz.build b/mozilla/ipc/chromium/moz.build
index 4050307fe..c1556cdcd 100644
--- a/mozilla/ipc/chromium/moz.build
+++ b/mozilla/ipc/chromium/moz.build
@@ -57,7 +57,7 @@ if os_win:
         'src/chrome/common/process_watcher_win.cc',
         'src/chrome/common/transport_dib_win.cc',
     ]
-else:
+elif not CONFIG['MOZ_SYSTEM_LIBEVENT']:
     DIRS += ['src/third_party']
 
 if os_posix:
@@ -138,7 +138,7 @@ if os_solaris:
        'src/base/time_posix.cc',
     ]
     
-else:
+elif not CONFIG['MOZ_SYSTEM_LIBEVENT']:
     LOCAL_INCLUDES += ['src/third_party/libevent/linux']
 
 ost = CONFIG['OS_TEST']
diff --git a/mozilla/ipc/chromium/src/third_party/libeventcommon.mozbuild b/mozilla/ipc/chromium/src/third_party/libeventcommon.mozbuild
index dbef7705e..e13bdbce4 100644
--- a/mozilla/ipc/chromium/src/third_party/libeventcommon.mozbuild
+++ b/mozilla/ipc/chromium/src/third_party/libeventcommon.mozbuild
@@ -28,7 +28,7 @@ else:
         os_linux = 1
         libevent_include_suffix = 'linux'
 
-if os_posix:
+if os_posix and not CONFIG['MOZ_SYSTEM_LIBEVENT']:
     DEFINES['HAVE_CONFIG_H'] = True
     LOCAL_INCLUDES += sorted([
         'libevent',
diff --git a/mozilla/ipc/chromium/src/third_party/moz.build b/mozilla/ipc/chromium/src/third_party/moz.build
index bc4a80ab9..de452b375 100644
--- a/mozilla/ipc/chromium/src/third_party/moz.build
+++ b/mozilla/ipc/chromium/src/third_party/moz.build
@@ -9,6 +9,9 @@ include(libevent_path_prefix + '/libeventcommon.mozbuild')
 if os_win:
     error('should not reach here on Windows')
 
+if CONFIG['MOZ_SYSTEM_LIBEVENT']:
+    error('should not reach here if we are using a native libevent')
+
 UNIFIED_SOURCES += [
     'libevent/buffer.c',
     'libevent/bufferevent.c',
diff --git a/mozilla/media/webrtc/signaling/test/common.build b/mozilla/media/webrtc/signaling/test/common.build
index c2e0e8427..1b79735d3 100644
--- a/mozilla/media/webrtc/signaling/test/common.build
+++ b/mozilla/media/webrtc/signaling/test/common.build
@@ -104,6 +104,9 @@ if CONFIG['MOZ_ALSA']:
 if CONFIG['MOZ_SYSTEM_JPEG']:
     OS_LIBS += CONFIG['MOZ_JPEG_LIBS']
 
+if CONFIG['MOZ_SYSTEM_LIBVPX']:
+    OS_LIBS += CONFIG['MOZ_LIBVPX_LIBS']
+
 if not CONFIG['MOZ_TREE_PIXMAN']:
     OS_LIBS += CONFIG['MOZ_PIXMAN_LIBS']
 
diff --git a/mozilla/old-configure.in b/mozilla/old-configure.in
index fe69f454f..c6602cca9 100644
--- a/mozilla/old-configure.in
+++ b/mozilla/old-configure.in
@@ -1923,6 +1923,44 @@ esac
 
 MOZ_CONFIG_NSPR()
 
+dnl ========================================================
+dnl system libevent Support
+dnl ========================================================
+MOZ_ARG_WITH_STRING(system-libevent,
+[  --with-system-libevent[=PFX]
+                          Use system libevent [installed at prefix PFX]],
+    LIBEVENT_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+if test "$LIBEVENT_DIR" = yes; then
+    PKG_CHECK_MODULES(MOZ_LIBEVENT, libevent,
+        MOZ_SYSTEM_LIBEVENT=1,
+        LIBEVENT_DIR=/usr)
+fi
+if test -z "$LIBEVENT_DIR" -o "$LIBEVENT_DIR" = no; then
+    MOZ_SYSTEM_LIBEVENT=
+elif test -z "$MOZ_SYSTEM_LIBEVENT"; then
+    CFLAGS="-I${LIBEVENT_DIR}/include $CFLAGS"
+    LDFLAGS="-L${LIBEVENT_DIR}/lib $LDFLAGS"
+    MOZ_CHECK_HEADER(event.h,
+        [if test ! -f "${LIBEVENT_DIR}/include/event.h"; then
+             AC_MSG_ERROR([event.h found, but is not in ${LIBEVENT_DIR}/include])
+         fi],
+        AC_MSG_ERROR([--with-system-libevent requested but event.h not found]))
+    AC_CHECK_LIB(event, event_init,
+                 [MOZ_SYSTEM_LIBEVENT=1
+                  MOZ_LIBEVENT_CFLAGS="-I${LIBEVENT_DIR}/include"
+                  MOZ_LIBEVENT_LIBS="-L${LIBEVENT_DIR}/lib -levent"],
+                 [MOZ_SYSTEM_LIBEVENT= MOZ_LIBEVENT_CFLAGS= MOZ_LIBEVENT_LIBS=])
+fi
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
+
+AC_SUBST(MOZ_SYSTEM_LIBEVENT)
+
 # TODO: We need to find a better place to define this include
 NSS_CFLAGS="-I${DIST}/include/nss"
 AC_SUBST(NSS_CFLAGS)
@@ -2010,6 +2048,51 @@ if test "${BZ2_DIR}" -a -d "${BZ2_DIR}" -a "$MOZ_SYSTEM_BZ2" = 1; then
     MOZ_BZ2_LIBS="-L${BZ2_DIR}/lib ${MOZ_BZ2_LIBS}"
 fi
 
+dnl ========================================================
+dnl system PNG Support
+dnl ========================================================
+MOZ_ARG_WITH_STRING(system-png,
+[  --with-system-png[=PFX]
+                          Use system libpng [installed at prefix PFX]],
+    PNG_DIR=$withval)
+
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LDFLAGS=$LDFLAGS
+_SAVE_LIBS=$LIBS
+if test -n "${PNG_DIR}" -a "${PNG_DIR}" != "yes"; then
+    CFLAGS="-I${PNG_DIR}/include $CFLAGS"
+    LDFLAGS="-L${PNG_DIR}/lib $LDFLAGS"
+fi
+if test -z "$PNG_DIR" -o "$PNG_DIR" = no; then
+    MOZ_SYSTEM_PNG=
+else
+    AC_CHECK_LIB(png, png_get_valid, [MOZ_SYSTEM_PNG=1 MOZ_PNG_LIBS="-lpng"],
+                 AC_MSG_ERROR([--with-system-png requested but no working libpng found]))
+    AC_CHECK_LIB(png, png_get_acTL, ,
+                 AC_MSG_ERROR([--with-system-png won't work because the system's libpng doesn't have APNG support]))
+fi
+if test "$MOZ_SYSTEM_PNG" = 1; then
+    AC_TRY_COMPILE([ #include <stdio.h>
+                     #include <sys/types.h>
+                     #include <png.h> ],
+                   [ #if PNG_LIBPNG_VER < $MOZPNG
+                     #error "Insufficient libpng version ($MOZPNG required)."
+                     #endif
+                     #ifndef PNG_UINT_31_MAX
+                     #error "Insufficient libpng version."
+                     #endif ],
+                   MOZ_SYSTEM_PNG=1,
+                   AC_MSG_ERROR([--with-system-png requested but no working libpng found]))
+fi
+CFLAGS=$_SAVE_CFLAGS
+LDFLAGS=$_SAVE_LDFLAGS
+LIBS=$_SAVE_LIBS
+
+if test "${PNG_DIR}" -a -d "${PNG_DIR}" -a "$MOZ_SYSTEM_PNG" = 1; then
+    MOZ_PNG_CFLAGS="-I${PNG_DIR}/include"
+    MOZ_PNG_LIBS="-L${PNG_DIR}/lib ${MOZ_PNG_LIBS}"
+fi
+
 fi # SKIP_LIBRARY_CHECKS
 
 dnl ========================================================
@@ -2813,6 +2896,13 @@ fi
 
 AC_SUBST(MOZ_EME)
 
+dnl ========================================================
+dnl system libvpx Support
+dnl ========================================================
+MOZ_ARG_WITH_BOOL(system-libvpx,
+[  --with-system-libvpx    Use system libvpx (located with pkgconfig)],
+    MOZ_SYSTEM_LIBVPX=1)
+
 MOZ_LIBVPX_CFLAGS=
 MOZ_LIBVPX_LIBS=
 
@@ -2820,6 +2910,36 @@ if test -n "$MOZ_VPX_ERROR_CONCEALMENT" ; then
     AC_DEFINE(MOZ_VPX_ERROR_CONCEALMENT)
 fi
 
+_SAVE_CFLAGS=$CFLAGS
+_SAVE_LIBS=$LIBS
+if test -n "$MOZ_SYSTEM_LIBVPX"; then
+    dnl ============================
+    dnl === libvpx Version check ===
+    dnl ============================
+    dnl Check to see if we have a system libvpx package.
+    PKG_CHECK_MODULES(MOZ_LIBVPX, vpx >= 1.5.0)
+
+    CFLAGS="$CFLAGS $MOZ_LIBVPX_CFLAGS"
+    LIBS="$LIBS $MOZ_LIBVPX_LIBS"
+
+    MOZ_CHECK_HEADER([vpx/vpx_decoder.h], [],
+     [AC_MSG_ERROR([Couldn't find vpx/vpx_decoder.h which is required for build with system libvpx. Use --without-system-libvpx to build with in-tree libvpx.])])
+
+    AC_CHECK_LIB(vpx, vpx_codec_dec_init_ver, [],
+     [AC_MSG_ERROR([--with-system-libvpx requested but symbol vpx_codec_dec_init_ver not found])])
+
+    MOZ_CHECK_HEADER([vpx_mem/vpx_mem.h],
+     [AC_CHECK_FUNC(vpx_mem_set_functions)])
+    if test "$ac_cv_header_vpx_mem_vpx_mem_h" = no -o \
+            "$ac_cv_func_vpx_mem_set_functions" = no; then
+        AC_DEFINE(MOZ_VPX_NO_MEM_REPORTING)
+    fi
+fi
+CFLAGS=$_SAVE_CFLAGS
+LIBS=$_SAVE_LIBS
+
+AC_SUBST(MOZ_SYSTEM_LIBVPX)
+
 AC_SUBST_LIST(MOZ_LIBVPX_CFLAGS)
 AC_SUBST_LIST(MOZ_LIBVPX_LIBS)
 
@@ -3007,6 +3127,170 @@ if test -n "$MOZ_SNDIO"; then
 fi
 AC_SUBST(MOZ_SNDIO)
 
+dnl ========================================================
+dnl Check for sqlite
+dnl ========================================================
+
+MOZ_SYSTEM_SQLITE=
+MOZ_ARG_ENABLE_BOOL(system-sqlite,
+[  --enable-system-sqlite  Use system sqlite (located with pkgconfig)],
+MOZ_SYSTEM_SQLITE=1,
+MOZ_SYSTEM_SQLITE= )
+
+if test -n "$MOZ_SYSTEM_SQLITE"
+then
+    dnl ============================
+    dnl === SQLite Version check ===
+    dnl ============================
+    dnl Check to see if the system SQLite package is new enough.
+    PKG_CHECK_MODULES(SQLITE, sqlite3 >= $SQLITE_VERSION)
+
+    dnl ==================================
+    dnl === SQLITE_SECURE_DELETE check ===
+    dnl ==================================
+    dnl Check to see if the system SQLite package is compiled with
+    dnl SQLITE_SECURE_DELETE enabled.
+    AC_MSG_CHECKING(for SQLITE_SECURE_DELETE support in system SQLite)
+    _SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="$CFLAGS $SQLITE_CFLAGS"
+    _SAVE_LIBS="$LIBS"
+    LIBS="$LIBS $SQLITE_LIBS"
+    AC_CACHE_VAL(ac_cv_sqlite_secure_delete,[
+        AC_TRY_RUN([
+            #include "sqlite3.h"
+            int main(int argc, char **argv){
+              return !sqlite3_compileoption_used("SQLITE_SECURE_DELETE");
+            }],
+            ac_cv_sqlite_secure_delete=yes,
+            ac_cv_sqlite_secure_delete=no,
+            ac_cv_sqlite_secure_delete=no
+        )
+    ])
+    AC_MSG_RESULT($ac_cv_sqlite_secure_delete)
+    CFLAGS="$_SAVE_CFLAGS"
+    LIBS="$_SAVE_LIBS"
+    if test "x$ac_cv_sqlite_secure_delete" = "xno"; then
+        AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_SECURE_DELETE.])
+    fi
+
+    dnl ===============================
+    dnl === SQLITE_THREADSAFE check ===
+    dnl ===============================
+    dnl Check to see if the system SQLite package is compiled with
+    dnl SQLITE_THREADSAFE enabled.
+    AC_MSG_CHECKING(for SQLITE_THREADSAFE support in system SQLite)
+    _SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="$CFLAGS $SQLITE_CFLAGS"
+    _SAVE_LIBS="$LIBS"
+    LIBS="$LIBS $SQLITE_LIBS"
+    AC_CACHE_VAL(ac_cv_sqlite_threadsafe,[
+        AC_TRY_RUN([
+            #include "sqlite3.h"
+            int main(int argc, char **argv){
+              return !sqlite3_compileoption_used("SQLITE_THREADSAFE=1");
+            }],
+            ac_cv_sqlite_threadsafe=yes,
+            ac_cv_sqlite_threadsafe=no,
+            ac_cv_sqlite_threadsafe=no
+        )
+    ])
+    AC_MSG_RESULT($ac_cv_sqlite_threadsafe)
+    CFLAGS="$_SAVE_CFLAGS"
+    LIBS="$_SAVE_LIBS"
+    if test "x$ac_cv_sqlite_threadsafe" = "xno"; then
+        AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_THREADSAFE.])
+    fi
+
+    dnl ================================
+    dnl === SQLITE_ENABLE_FTS3 check ===
+    dnl ================================
+    dnl check to see if the system SQLite package is compiled with
+    dnl SQLITE_ENABLE_FTS3 enabled.
+    AC_MSG_CHECKING(for SQLITE_ENABLE_FTS3 support in system SQLite)
+    _SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="$CFLAGS $SQLITE_CFLAGS"
+    _SAVE_LIBS="$LIBS"
+    LIBS="$LIBS $SQLITE_LIBS"
+    AC_CACHE_VAL(ac_cv_sqlite_enable_fts3,[
+        AC_TRY_RUN([
+            #include "sqlite3.h"
+            int main(int argc, char **argv){
+              return !sqlite3_compileoption_used("SQLITE_ENABLE_FTS3");
+            }],
+            ac_cv_sqlite_enable_fts3=yes,
+            ac_cv_sqlite_enable_fts3=no,
+            ac_cv_sqlite_enable_fts3=no
+        )
+    ])
+    AC_MSG_RESULT($ac_cv_sqlite_enable_fts3)
+    CFLAGS="$_SAVE_CFLAGS"
+    LIBS="$_SAVE_LIBS"
+    if test "x$ac_cv_sqlite_enable_fts3" = "xno"; then
+        AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_FTS3.])
+    fi
+
+    dnl =========================================
+    dnl === SQLITE_ENABLE_UNLOCK_NOTIFY check ===
+    dnl =========================================
+    dnl check to see if the system SQLite package is compiled with
+    dnl SQLITE_ENABLE_UNLOCK_NOTIFY enabled.
+    AC_MSG_CHECKING(for SQLITE_ENABLE_UNLOCK_NOTIFY support in system SQLite)
+    _SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="$CFLAGS $SQLITE_CFLAGS"
+    _SAVE_LIBS="$LIBS"
+    LIBS="$LIBS $SQLITE_LIBS"
+    AC_CACHE_VAL(ac_cv_sqlite_enable_unlock_notify,[
+        AC_TRY_RUN([
+            #include "sqlite3.h"
+            int main(int argc, char **argv){
+              return !sqlite3_compileoption_used("SQLITE_ENABLE_UNLOCK_NOTIFY");
+            }],
+            ac_cv_sqlite_enable_unlock_notify=yes,
+            ac_cv_sqlite_enable_unlock_notify=no,
+            ac_cv_sqlite_enable_unlock_notify=no
+        )
+    ])
+    AC_MSG_RESULT($ac_cv_sqlite_enable_unlock_notify)
+    CFLAGS="$_SAVE_CFLAGS"
+    LIBS="$_SAVE_LIBS"
+    if test "x$ac_cv_sqlite_enable_unlock_notify" = "xno"; then
+        AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_UNLOCK_NOTIFY.])
+    fi
+
+    dnl =========================================
+    dnl === SQLITE_ENABLE_DBSTAT_VTAB check ===
+    dnl =========================================
+    dnl check to see if the system SQLite package is compiled with
+    dnl SQLITE_ENABLE_DBSTAT_VTAB.
+    AC_MSG_CHECKING(for SQLITE_ENABLE_DBSTAT_VTAB support in system SQLite)
+    _SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="$CFLAGS $SQLITE_CFLAGS"
+    _SAVE_LIBS="$LIBS"
+    LIBS="$LIBS $SQLITE_LIBS"
+    AC_CACHE_VAL(ac_cv_sqlite_dbstat_vtab,[
+        AC_TRY_RUN([
+            #include "sqlite3.h"
+            int main(int argc, char **argv){
+              return !sqlite3_compileoption_used("SQLITE_ENABLE_DBSTAT_VTAB");
+            }],
+            ac_cv_sqlite_dbstat_vtab=yes,
+            ac_cv_sqlite_dbstat_vtab=no,
+            ac_cv_sqlite_dbstat_vtab=no
+        )
+    ])
+    AC_MSG_RESULT($ac_cv_sqlite_dbstat_vtab)
+    CFLAGS="$_SAVE_CFLAGS"
+    LIBS="$_SAVE_LIBS"
+    if test "x$ac_cv_sqlite_dbstat_vtab" = "xno"; then
+        AC_MSG_ERROR([System SQLite library is not compiled with SQLITE_ENABLE_DBSTAT_VTAB.])
+    fi
+fi
+
+if test -n "$MOZ_SYSTEM_SQLITE"; then
+    AC_DEFINE(MOZ_SYSTEM_SQLITE)
+fi
+AC_SUBST(MOZ_SYSTEM_SQLITE)
+
 dnl ========================================================
 dnl NegotiateAuth
 dnl ========================================================
@@ -5139,6 +5423,7 @@ MC_BASILISK=$MC_BASILISK
 MC_PALEMOON=$MC_PALEMOON
 MOZ_EME=$MOZ_EME
 MOZ_WEBRTC=$MOZ_WEBRTC
+MOZ_SYSTEM_LIBEVENT=$MOZ_SYSTEM_LIBEVENT
 MOZ_SYSTEM_JPEG=$MOZ_SYSTEM_JPEG
 MOZ_SYSTEM_ZLIB=$MOZ_SYSTEM_ZLIB
 MOZ_SYSTEM_BZ2=$MOZ_SYSTEM_BZ2
diff --git a/mozilla/storage/SQLiteMutex.h b/mozilla/storage/SQLiteMutex.h
index eaa69eab1..a38525fd6 100644
--- a/mozilla/storage/SQLiteMutex.h
+++ b/mozilla/storage/SQLiteMutex.h
@@ -50,7 +50,7 @@ public:
     mMutex = aMutex;
   }
 
-#if !defined(DEBUG)
+#if !defined(DEBUG) || defined(MOZ_SYSTEM_SQLITE)
   /**
    * Acquires the mutex.
    */
diff --git a/mozilla/storage/moz.build b/mozilla/storage/moz.build
index 02e421b4b..9782ded88 100644
--- a/mozilla/storage/moz.build
+++ b/mozilla/storage/moz.build
@@ -95,6 +95,10 @@ if CONFIG['MOZ_MEMORY']:
 DEFINES['SQLITE_MAX_LIKE_PATTERN_LENGTH'] = 50000
 
 # See Sqlite moz.build for reasoning about TEMP_STORE.
+# For system sqlite we cannot use the compile time option, so we use a pragma.
+if CONFIG['MOZ_SYSTEM_SQLITE'] and (CONFIG['OS_TARGET'] == 'Android'
+                                    or CONFIG['HAVE_64BIT_BUILD']):
+    DEFINES['MOZ_MEMORY_TEMP_STORE_PRAGMA'] = True
 
 LOCAL_INCLUDES += [
     '/db/sqlite3/src',
diff --git a/mozilla/toolkit/library/moz.build b/mozilla/toolkit/library/moz.build
index c2f12b776..2f0594689 100644
--- a/mozilla/toolkit/library/moz.build
+++ b/mozilla/toolkit/library/moz.build
@@ -194,9 +194,18 @@ if CONFIG['SERVO_TARGET_DIR']:
 if CONFIG['MOZ_SYSTEM_JPEG']:
     OS_LIBS += CONFIG['MOZ_JPEG_LIBS']
 
+if CONFIG['MOZ_SYSTEM_PNG']:
+    OS_LIBS += CONFIG['MOZ_PNG_LIBS']
+
 if CONFIG['MOZ_SYSTEM_HUNSPELL']:
     OS_LIBS += CONFIG['MOZ_HUNSPELL_LIBS']
 
+if CONFIG['MOZ_SYSTEM_LIBEVENT']:
+    OS_LIBS += CONFIG['MOZ_LIBEVENT_LIBS']
+
+if CONFIG['MOZ_SYSTEM_LIBVPX']:
+    OS_LIBS += CONFIG['MOZ_LIBVPX_LIBS']
+
 if not CONFIG['MOZ_TREE_PIXMAN']:
     OS_LIBS += CONFIG['MOZ_PIXMAN_LIBS']
 
-- 
2.35.1

